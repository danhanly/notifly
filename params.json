{"name":"Signalert","tagline":"Customisable & Extensible Notifications - Alerts Exactly Where You Need Them","body":"Signalert\r\n=========\r\n**Customisable & Extensible Notifications - Alerts Exactly Where You Need Them**\r\n\r\nSignalert is a PHP notifications implementation designed to allow you to communicate effectively from anywhere in your application's code to your users.\r\n\r\nSignalert makes it simple to store messages:\r\n\r\n```php\r\n$signalert = new Signalert();\r\n$signalert->store('Notification Name', 'homepage');\r\n```\r\n\r\nSignalert makes it simple to render messages:\r\n\r\n```php\r\n$signalert = new Signalert();\r\n$signalert->render('homepage', 'error');\r\n```\r\n\r\nSignalert even makes it simple to retrieve messages as an array:\r\n\r\n```php\r\n$signalert = new Signalert();\r\n$signalert->fetch('homepage', 'error');\r\n```\r\n\r\n## Signalert Works With Your Project\r\n\r\nSignalert, out of the box, works with the standard sessions via it's SessionDriver. Also, Signalert is bundled with a series of default renderers which are pre-built using [bootstrap alerts](http://getbootstrap.com/components/#alerts) markup, with an option for switching to built-in [foundation alerts](http://foundation.zurb.com/docs/components/alert_boxes.html) markup.\r\n\r\n### Do you have a specific need for storage of notifications?\r\n\r\nSignalert is extensible. It means that you can add your own drivers for storing notification data, and it will tie seamlessly into the way Signalert functions. Does your project use `memcached` or `redis`? Does your project save session data to the database? Signalert can be extended to support any of those mediums, and more.\r\n\r\n### Do you have a specific need for the rendering of notifications?\r\n\r\nIt's an easy assumption to make that you may want your notifications to be displayed using a particular style, framework or markup. **Signalert has your back.** Signalert can be extended to add your own alert types, with your own markup and style. Signalert makes it simple to plug notifications directly into your project, and make them feel at home within the design and style of your site.\r\n\r\n## Customising Signalert\r\n\r\nBy default, Signalert gives access to its SessionDriver to store messages in the default session, and also allows you to access to a simple [bootstrap](http://getbootstrap.com/) renderer class via its BootstrapRenderer.\r\n\r\nYou can customise any of these by writing your own classes, and specifying them within the configuration file `.signalert.yml` which should exist within your project root.\r\n\r\n```yml\r\nrenderer: \\Signalert\\Renderer\\BootstrapRenderer\r\ndriver: \\Signalert\\Storage\\SessionDriver\r\n```\r\n\r\nProviding the full class name for each of these items will allow Signalert to understand and utilise them in its processes.\r\n\r\n### Renderer Support\r\n\r\nSignalert is currently bundled with support for [Bootstrap 3](http://getbootstrap.com/) & [Foundation 5](http://foundation.zurb.com/) support. All you need to do is specify which you'd like to use within your `.signalert.yml` file.\r\n\r\n#### Bootstrap Configuration\r\n\r\n```yml\r\nrenderer: \\Signalert\\Renderer\\BootstrapRenderer\r\n```\r\n\r\n#### Foundation Configuration\r\n\r\n```yml\r\nrenderer: \\Signalert\\Renderer\\FoundationRenderer\r\n```\r\n\r\n#### Custom Markup Configuration\r\n\r\nYou can create your own renderer and link it with Signalert. We've written an interface which provides a series of simple rules for you to work with. All you need to do is ensure your renderer implements the following class: `\\Signalert\\Renderer\\RendererInterface`\r\n\r\nFor the following example, assume that you have created a custom renderer at the following class path: `\\MyProject\\MyNamespace\\CustomRenderer`\r\n\r\n```yml\r\nrenderer: \\MyProject\\MyNamespace\\CustomRenderer\r\n```\r\n\r\nThen you can use Signalert as you would normally, but this time, your custom markup will be rendered instead.\r\n\r\n### Storage Driver Support\r\n\r\nSignalert is currently bundled with support for PHP Session support.\r\n\r\n#### Session Configuration\r\n\r\n```yml\r\ndriver: \\Signalert\\Storage\\SessionDriver\r\n```\r\n\r\n#### Custom Driver Configuration\r\n\r\nYour storage drivers have a very simple method of working. We've written an interface which provides a series of simple rules for you to work with. All you need to do is ensure your storage driver implements the following class: `\\Signalert\\Storage\\DriverInterface`\r\n\r\nFor the following example, assume that you have created a custom renderer at the following class path: `\\MyProject\\MyNamespace\\CustomStorageDriver`\r\n\r\n```yml\r\ndriver: \\MyProject\\MyNamespace\\CustomStorageDriver\r\n```\r\n\r\nThen you can use Signalert as you would normally, but this time, your custom driver will be used instead.","google":"UA-66902743-1","note":"Don't delete this file! It's used internally to help with page regeneration."}