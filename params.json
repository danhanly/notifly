{"name":"Notifly","tagline":"Customisable & Extensible Notifications - Providing Alerts Exactly Where You Need Them","body":"Notifly\r\n=========\r\nCustomisable & Extensible Notifications - Providing Alerts Exactly Where You Need Them\r\n\r\nNotifly makes it simple to store messages:\r\n\r\n```php\r\n$notifly = new Notifly();\r\n$notifly->store('Notification Name', 'homepage');\r\n```\r\n\r\nNotifly makes it simple to render messages:\r\n\r\n```php\r\n$notifly = new Notifly();\r\n$notifly->render('error', 'homepage');\r\n```\r\n\r\n## Notifly Works With Your Project\r\n\r\nNotifly, as standard, works with the standard sessions via it's SessionDriver. Also, Notifly is also bundled with a series of default renderers which are pre-built using [bootstrap alerts](http://getbootstrap.com/components/#alerts) markup.\r\n\r\n### Do you have a specific need for storage of notifications?\r\n\r\nNotifly is extensible. It means that you can add your own drivers for storing notification data, and it will tie seamlessly into the way Notifly functions. Does your project use `memcached` or `redis`? Does your project save session data to the database? Notifly can be extended to support any of those mediums, and more.\r\n\r\n### Do you have a specific need for the rendering of notifications?\r\n\r\nIt's an easy assumption to make that you may want your notifications to be displayed using a particular style, framework or markup. Notifly has your back. Notifly can be extended to add your own alert types, with your own markup and style. Notifly makes it simple to plug notifications directly into your project, and make them feel at home within the design and style of your site.\r\n\r\n## Customising Notifly\r\n\r\nBy default, notifly gives access to its SessionDriver to store messages in the default session, and also allows you to access four different types of renderer `error`, `warning`, `info` and `success` which use bootstrap display classes.\r\n\r\nYou can customise any of these by writing your own classes, and specifying them within the configuration file `.notifly.yml` which should exist within your project root.\r\n\r\n```yml\r\nrenderers:\r\n  error: \\Notifly\\Renderer\\Error\r\n  warning: \\Notifly\\Renderer\\Warning\r\n  info: \\Notifly\\Renderer\\Info\r\n  success: \\Notifly\\Renderer\\Success\r\ndriver: \\Notifly\\Storage\\SessionDriver\r\n```\r\n\r\nProviding the full class name for each of these items will allow Notifly to understand and utilise them in its processes.\r\n\r\n### Extending Storage Drivers\r\n\r\nYour storage drivers have a very simple method of working. We've written an interface which provides a series of simple rules for you to work with. All you need to do is ensure your storage driver implements the following class: `\\Notifly\\Storage\\DriverInterface`\r\n\r\n### Extending Renderers\r\n\r\nYour renderers have a very simple method of working. We've written an interface which provides a series of simple rules for you to work with. All you need to do is ensure your renderer implements the following class: `\\Notifly\\Renderer\\RendererInterface`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}